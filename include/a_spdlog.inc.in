/** 
 *  SA-MP Log Functions
 *
 *  (c) Copyright 2017-2018, ProMetheus
 */

#if defined HEADER_A_SPDLOG_INC
	#endinput
#endif
#define HEADER_A_SPDLOG_INC

/**
 * Comment this out if you dont want to use the version check
 * - Or define SPDLOG_DISABLE_CHECK_VERSION before including spdlog_inc
 */
#if !defined SPDLOG_DISABLE_CHECK_VERSION
	#define SPDLOG_CHECK_VERSION
#endif

/** 
 * SPDLog Output
 */
#define HEADER_A_SPDLOG_OUT "a_spdlog"
 
/**
 * LoggerVersion
 * @param string version
 */
native LoggerVersion(const version[]);

/**
 * SPDLOG Levels
 */
enum SPDLOG_LEVEL
{
	TRACE = 0,
	DEBUG = 1,
	INFO = 2,
	WARN = 3,
	ERROR = 4,
	CRITICAL = 5,
	OFF = 6
};

/**
 * ConsoleLogger
 * - Warning: Not using the logprintf sink (not logged to server_log.txt)
 * @param string name
 * @param string path
 */
native ConsoleLogger(const name[]);

/**
 * BasicLogger
 * @param string name
 * @param string path
 */
native BasicLogger(const name[], const path[]);

/**
 * RotatingLogger
 * @param string name
 * @param string path
 * @param int seconds
 * @param int file count
 */
native RotatingLogger(const name[], const path[], time, files);

/**
 * DailyLogger
 * @param string name
 * @param string path
 * @param int seconds
 * @param int minute
 */
native DailyLogger(const name[], const path[], hour, minute);

/**
 * SysLogger
 * - Needs the plugin compiled with SPDLOG_ENABLE_SYSLOG
 * @param string name
 * @param string path
 * @param int pid
 */
native SysLogger(const name[], const path[], pid);

/**
 * LoggerSetAsyncMode
 * Set asynchronus mode for sink flush
 * @param size_t size
 */
native LoggerSetAsyncMode(bytes);

/**
 * LoggerSetAsyncModeIntervaled
 * Set asynchronus mode for sink flush with flush interval
 * @param size_t size
 * @param int seconds
 */
native LoggerSetAsyncModeIntervaled(bytes, seconds);

/**
 * LoggerSetPattern
 * Set timestamp pattern | spdlog::set_pattern
 * @param string name
 * - As example *** [%H:%M:%S %z] [thread %t] %v ***
 */
native LoggerSetPattern(const pattern[]);

/**
 * LoggerSetLevel
 * Set log level
 * @param SPDLOG_LEVEL loglevel
 */
native LoggerSetLevel(SPDLOG_LEVEL:level);

/**
 * LogInfo
 * @param string path
 * @param string message
 * @param ...
 */
native LogInfo(const name[], const message[], {Float,_}:...);

/**
 * LogWarn
 * @param string path
 * @param string message
 * @param ...
 */
native LogWarn(const name[], const message[], {Float,_}:...);

/**
 * LogCritical
 * @param string path
 * @param string message
 * @param ...
 */
native LogCritical(const name[], const message[], {Float,_}:...);

/**
 * LogDebug
 * @param string path
 * @param string message
 * @param ...
 */
native LogDebug(const name[], const message[], {Float,_}:...);

/**
 * LogTrace
 * @param string path
 * @param string message
 * @param ...
 */
native LogTrace(const name[], const message[], {Float,_}:...);

/**
 * LogError
 * @param string path
 * @param string message
 * @param ...
 */
native LogError(const name[], const message[], {Float,_}:...);

/**
 * LogFlush
 * @param string name
 * @param SPDLOG_LEVEL:level
 */
native LogFlushOn(const name[], SPDLOG_LEVEL:level);


/**
 * LogFlush
 * @param string name
 */
native LogFlush(const name[]);

/**
 * LogLevel
 * @param string name
 * @param SPDLOG_LEVEL:level
 */
native LogLevel(const name[], SPDLOG_LEVEL:level);

/**
 * DropAllLogger
 * - Drop all logger | spdlog::drop_all();
 */
native DropAllLogger();

/**
 * EnableErrorLogger
 * - Prints errors from spd into the server_log.txt
 */
native EnableErrorLogger();

/**
 * SPDLog
 * - Check version missmatch to avoid include / plugin missmatches
 */
#if defined SPDLOG_CHECK_VERSION
	/**
	 * SPDLog - Version
	 */
	#define SPDLOG_VERSION "{{GIT_REVISION}}"

	/**
	 * OnGameModeInit (Hook)
	 * - Used to call the spdlog version check
	 */
	public OnGameModeInit() // Die Parameter kommen natürlich immer auf die Funktion an ;)
	{
		#if defined _OnGameModeInit
			LoggerVersion(SPDLOG_VERSION);
			_OnGameModeInit();
		#else		
			printf("[SPDLog] Failed to initialize version check!");
		#endif
		return 1;
	}

	#if defined _OnGameModeInit
		forward _OnGameModeInit(); // Die Parameter kommen natürlich immer auf die Funktion an ;)
	#endif
	#if defined _ALS_OnGameModeInit
		#undef OnGameModeInit
	#else
		#define _ALS_OnGameModeInit
	#endif
	#define OnGameModeInit _OnGameModeInit
#endif
